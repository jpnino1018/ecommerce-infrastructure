trigger:
  branches:
    include:
      - main
      - stage
      - develop

pool:
  name: my-machine

variables:
  tf_version: '1.8.5'
  rm-rg-name: 'rg-terraform-state'
  rm-account-name: 'ecommerceinfrastrgacc'
  rm.container-name: 'tfstate'

stages:

# === DEV STAGE ===
- stage: Terraform_Dev
  displayName: "Terraform Deploy - Dev"
  condition: eq(variables['Build.SourceBranchName'], 'develop')
  jobs:
    - job: Deploy_Dev
      displayName: "Deploy Dev Environment"
      steps:
        - checkout: self
          clean: true

        - task: TerraformTask@5
          inputs:
            provider: 'azurerm'
            command: 'init'
            workingDirectory: '$(System.DefaultWorkingDirectory)/envs/dev'
            backendServiceArm: 'azure-connection'
            backendAzureRmResourceGroupName: $(rm-rg-name)
            backendAzureRmStorageAccountName: $(rm-account-name)
            backendAzureRmContainerName: $(rm-container-name)
            backendAzureRmKey: 'dev.terraform.tfstate'

        - task: TerraformTask@5
          inputs:
            provider: 'azurerm'
            command: 'validate'
            workingDirectory: '$(System.DefaultWorkingDirectory)/envs/dev'
        
        - task: TerraformTask@5
          inputs:
            provider: 'azurerm'
            command: 'plan'
            environmentServiceNameAzureRM: 'azure-connection'

        - task: TerraformTask@5
          inputs:
            provider: 'azurerm'
            command: 'apply'
            workingDirectory: '$(System.DefaultWorkingDirectory)/envs/dev'
            environmentServiceNameAzureRM: 'azure-connection'

# === STAGE STAGE ===
- stage: Terraform_Stage
  displayName: "Terraform Deploy - Stage"
  condition: eq(variables['Build.SourceBranchName'], 'stage')
  jobs:
    - job: Deploy_Stage
      displayName: "Deploy Stage Environment"
      steps:
        - checkout: self
          clean: true

        - task: TerraformTask@5
          inputs:
            provider: 'azurerm'
            command: 'init'
            workingDirectory: '$(System.DefaultWorkingDirectory)/envs/stage'
            backendServiceArm: 'azure-connection'
            backendAzureRmResourceGroupName: $(rm-rg-name)
            backendAzureRmStorageAccountName: $(rm-account-name)
            backendAzureRmContainerName: $(rm-container-name)
            backendAzureRmKey: 'dev.terraform.tfstate'

        - task: TerraformTask@5
          inputs:
            provider: 'azurerm'
            command: 'validate'
            workingDirectory: '$(System.DefaultWorkingDirectory)/envs/stage'
        
        - task: TerraformTask@5
          inputs:
            provider: 'azurerm'
            command: 'plan'
            environmentServiceNameAzureRM: 'azure-connection'

        - task: TerraformTask@5
          inputs:
            provider: 'azurerm'
            command: 'apply'
            workingDirectory: '$(System.DefaultWorkingDirectory)/envs/stage'
            environmentServiceNameAzureRM: 'azure-connection'

# === PROD STAGE ===
- stage: Terraform_Prod
  displayName: "Terraform Deploy - Prod"
  condition: eq(variables['Build.SourceBranchName'], 'main')
  jobs:
    - job: Deploy_Prod
      displayName: "Deploy Prod Environment"
      steps:
        - checkout: self
          clean: true

        - task: TerraformTask@5
          inputs:
            provider: 'azurerm'
            command: 'init'
            workingDirectory: '$(System.DefaultWorkingDirectory)/envs/prod'
            backendServiceArm: 'azure-connection'
            backendAzureRmResourceGroupName: $(rm-rg-name)
            backendAzureRmStorageAccountName: $(rm-account-name)
            backendAzureRmContainerName: $(rm-container-name)
            backendAzureRmKey: 'dev.terraform.tfstate'

        - task: TerraformTask@5
          inputs:
            provider: 'azurerm'
            command: 'validate'
            workingDirectory: '$(System.DefaultWorkingDirectory)/envs/prod'
        
        - task: TerraformTask@5
          inputs:
            provider: 'azurerm'
            command: 'plan'
            environmentServiceNameAzureRM: 'azure-connection'

        - task: TerraformTask@5
          inputs:
            provider: 'azurerm'
            command: 'apply'
            workingDirectory: '$(System.DefaultWorkingDirectory)/envs/prod'
            environmentServiceNameAzureRM: 'azure-connection'