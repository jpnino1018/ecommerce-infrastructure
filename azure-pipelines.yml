trigger:
  branches:
    include:
      - main
      - stage
      - develop

pool:
  name: my-machine

variables:
  tf_version: '1.8.5'

stages:

# === DEV STAGE ===
- stage: Terraform_Dev
  displayName: "Terraform Deploy - Dev"
  condition: eq(variables['Build.SourceBranchName'], 'develop')
  jobs:
    - job: Deploy_Dev
      displayName: "Deploy Dev Environment"
      steps:
        - checkout: self
          clean: true

        - task: TerraformInstaller@1
          inputs:
            terraformVersion: '$(tf_version)'

        - task: TerraformCLI@2
          displayName: 'Terraform Init (Dev)'
          inputs:
            command: 'init'
            workingDirectory: '$(Build.SourcesDirectory)/envs/dev'
            backendType: 'selfConfigured'
            environmentServiceName: 'azure-connection'

        - task: TerraformCLI@2
          displayName: 'Terraform Validate (Dev)'
          inputs:
            command: 'validate'
            workingDirectory: '$(Build.SourcesDirectory)/envs/dev'

        - task: TerraformCLI@2
          displayName: 'Terraform Plan (Dev)'
          inputs:
            command: 'plan'
            workingDirectory: '$(Build.SourcesDirectory)/envs/dev'
            commandOptions: '-input=false -var-file="dev.tfvars" -out=tfplan'
            environmentServiceName: 'azure-connection'

        - task: TerraformCLI@2
          displayName: 'Terraform Apply (Dev)'
          inputs:
            command: 'apply'
            workingDirectory: '$(Build.SourcesDirectory)/envs/dev'
            commandOptions: '-input=false -auto-approve tfplan'
            environmentServiceName: 'azure-connection'

# === STAGE STAGE ===
- stage: Terraform_Stage
  displayName: "Terraform Deploy - Stage"
  condition: eq(variables['Build.SourceBranchName'], 'stage')
  jobs:
    - job: Deploy_Stage
      displayName: "Deploy Stage Environment"
      steps:
        - checkout: self
          clean: true

        - task: TerraformInstaller@1
          inputs:
            terraformVersion: '$(tf_version)'

        - task: TerraformCLI@2
          displayName: 'Terraform Init (Stage)'
          inputs:
            command: 'init'
            workingDirectory: '$(Build.SourcesDirectory)/envs/stage'
            backendType: 'selfConfigured'
            environmentServiceName: 'azure-connection'

        - task: TerraformCLI@2
          displayName: 'Terraform Validate (Stage)'
          inputs:
            command: 'validate'
            workingDirectory: '$(Build.SourcesDirectory)/envs/stage'

        - task: TerraformCLI@2
          displayName: 'Terraform Plan (Stage)'
          inputs:
            command: 'plan'
            workingDirectory: '$(Build.SourcesDirectory)/envs/stage'
            commandOptions: '-input=false -var-file="stage.tfvars" -out=tfplan'
            environmentServiceName: 'azure-connection'

        - task: TerraformCLI@2
          displayName: 'Terraform Apply (Stage)'
          inputs:
            command: 'apply'
            workingDirectory: '$(Build.SourcesDirectory)/envs/stage'
            commandOptions: '-input=false -auto-approve tfplan'
            environmentServiceName: 'azure-connection'

# === PROD STAGE ===
- stage: Terraform_Prod
  displayName: "Terraform Deploy - Prod"
  condition: eq(variables['Build.SourceBranchName'], 'main')
  jobs:
    - job: Deploy_Prod
      displayName: "Deploy Prod Environment"
      steps:
        - checkout: self
          clean: true

        - task: TerraformInstaller@1
          inputs:
            terraformVersion: '$(tf_version)'

        - task: TerraformCLI@2
          displayName: 'Terraform Init (Prod)'
          inputs:
            command: 'init'
            workingDirectory: '$(Build.SourcesDirectory)/envs/prod'
            backendType: 'selfConfigured'
            environmentServiceName: 'azure-connection'

        - task: TerraformCLI@2
          displayName: 'Terraform Validate (Prod)'
          inputs:
            command: 'validate'
            workingDirectory: '$(Build.SourcesDirectory)/envs/prod'

        - task: TerraformCLI@2
          displayName: 'Terraform Plan (Prod)'
          inputs:
            command: 'plan'
            workingDirectory: '$(Build.SourcesDirectory)/envs/prod'
            commandOptions: '-input=false -var-file="prod.tfvars" -out=tfplan'
            environmentServiceName: 'azure-connection'

        - task: TerraformCLI@2
          displayName: 'Terraform Apply (Prod)'
          inputs:
            command: 'apply'
            workingDirectory: '$(Build.SourcesDirectory)/envs/prod'
            commandOptions: '-input=false -auto-approve tfplan'
            environmentServiceName: 'azure-connection'
